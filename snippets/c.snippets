snippet @
	/**
	 * @file        ${1}
	 *
	 * @date        `strftime("%Y-%m-%d")`
	 *
	 * @author      `g:snips_author`
	 */
	${2}
snippet /**
	/**
	 * ${1}
	 */
	${2}
snippet {
	{
		${1}
	}${2}
snippet main
	int main(int argc, const char **argv)
	{
		${1}
	}
snippet #inc
	#include <${1:stdio}.h>${2}
snippet #Inc
	#include "${1:`Filename("$1.h")`}"${2}
snippet #def
	#define
snippet #Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet #ifdef
	#ifdef ${1:FOO}
	${2:#define }
	#endif /* ${1} */
snippet #if
	#if ${1:FOO}
		${2}
	#endif
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}

	#define $1

	${2}

	#endif /* end of include guard: $1 */
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}${3}
snippet else
	else {
		${1}
	}${2}
snippet do
	do {
		${1:/* code */}
	} while (${2:/* condition */});${3}
snippet while
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet for
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}${5}
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}${6}
snippet func
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
snippet void
	void ${1:function_name}(${2})
	{
		${3}
	}
snippet typedef
	typedef ${1:int} ${2:MyCustomType};${3}
snippet struct
	typedef struct ${2:$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet enum
	typedef enum {
		${1:/* data */}
	} ${2:foo};
